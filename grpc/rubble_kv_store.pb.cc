// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rubble_kv_store.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rubble_kv_store.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubble {

namespace {

const ::google::protobuf::Descriptor* Op_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Op_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_OpType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpReply_OpType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SyncRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rubble_5fkv_5fstore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rubble_5fkv_5fstore_2eproto() {
  protobuf_AddDesc_rubble_5fkv_5fstore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rubble_kv_store.proto");
  GOOGLE_CHECK(file != NULL);
  Op_descriptor_ = file->message_type(0);
  static const int Op_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, type_),
  };
  Op_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Op_descriptor_,
      Op::default_instance_,
      Op_offsets_,
      -1,
      -1,
      -1,
      sizeof(Op),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Op, _is_default_instance_));
  Op_OpType_descriptor_ = Op_descriptor_->enum_type(0);
  OpReply_descriptor_ = file->message_type(1);
  static const int OpReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, type_),
  };
  OpReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpReply_descriptor_,
      OpReply::default_instance_,
      OpReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReply, _is_default_instance_));
  OpReply_OpType_descriptor_ = OpReply_descriptor_->enum_type(0);
  SyncRequest_descriptor_ = file->message_type(2);
  static const int SyncRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, args_),
  };
  SyncRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncRequest_descriptor_,
      SyncRequest::default_instance_,
      SyncRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, _is_default_instance_));
  SyncReply_descriptor_ = file->message_type(3);
  static const int SyncReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncReply, message_),
  };
  SyncReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncReply_descriptor_,
      SyncReply::default_instance_,
      SyncReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rubble_5fkv_5fstore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Op_descriptor_, &Op::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpReply_descriptor_, &OpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncRequest_descriptor_, &SyncRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncReply_descriptor_, &SyncReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rubble_5fkv_5fstore_2eproto() {
  delete Op::default_instance_;
  delete Op_reflection_;
  delete OpReply::default_instance_;
  delete OpReply_reflection_;
  delete SyncRequest::default_instance_;
  delete SyncRequest_reflection_;
  delete SyncReply::default_instance_;
  delete SyncReply_reflection_;
}

void protobuf_AddDesc_rubble_5fkv_5fstore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_rubble_5fkv_5fstore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rubble_kv_store.proto\022\006rubble\"\201\001\n\002Op\022\013"
    "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\n\n\002Id\030\003 \001(\004\022\037"
    "\n\004type\030\004 \001(\0162\021.rubble.Op.OpType\"2\n\006OpTyp"
    "e\022\007\n\003GET\020\000\022\007\n\003PUT\020\001\022\n\n\006DELETE\020\002\022\n\n\006UPDAT"
    "E\020\003\"\232\001\n\007OpReply\022\n\n\002ok\030\001 \001(\010\022\r\n\005value\030\002 \001"
    "(\t\022\016\n\006status\030\003 \001(\t\022\n\n\002Id\030\004 \001(\003\022$\n\004type\030\005"
    " \001(\0162\026.rubble.OpReply.OpType\"2\n\006OpType\022\007"
    "\n\003GET\020\000\022\007\n\003PUT\020\001\022\n\n\006DELETE\020\002\022\n\n\006UPDATE\020\003"
    "\"\033\n\013SyncRequest\022\014\n\004args\030\001 \001(\t\"\034\n\tSyncRep"
    "ly\022\017\n\007message\030\001 \001(\t2s\n\024RubbleKvStoreServ"
    "ice\0220\n\004Sync\022\023.rubble.SyncRequest\032\021.rubbl"
    "e.SyncReply\"\000\022)\n\004DoOp\022\n.rubble.Op\032\017.rubb"
    "le.OpReply\"\000(\0010\001B\034\n\nrubblejavaB\006RubbleP\001"
    "\242\002\003Rubb\006proto3", 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rubble_kv_store.proto", &protobuf_RegisterTypes);
  Op::default_instance_ = new Op();
  OpReply::default_instance_ = new OpReply();
  SyncRequest::default_instance_ = new SyncRequest();
  SyncReply::default_instance_ = new SyncReply();
  Op::default_instance_->InitAsDefaultInstance();
  OpReply::default_instance_->InitAsDefaultInstance();
  SyncRequest::default_instance_->InitAsDefaultInstance();
  SyncReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rubble_5fkv_5fstore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rubble_5fkv_5fstore_2eproto {
  StaticDescriptorInitializer_rubble_5fkv_5fstore_2eproto() {
    protobuf_AddDesc_rubble_5fkv_5fstore_2eproto();
  }
} static_descriptor_initializer_rubble_5fkv_5fstore_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Op_OpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_OpType_descriptor_;
}
bool Op_OpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Op_OpType Op::GET;
const Op_OpType Op::PUT;
const Op_OpType Op::DELETE;
const Op_OpType Op::UPDATE;
const Op_OpType Op::OpType_MIN;
const Op_OpType Op::OpType_MAX;
const int Op::OpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Op::kKeyFieldNumber;
const int Op::kValueFieldNumber;
const int Op::kIdFieldNumber;
const int Op::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Op::Op()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rubble.Op)
}

void Op::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Op::Op(const Op& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rubble.Op)
}

void Op::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
}

Op::~Op() {
  // @@protoc_insertion_point(destructor:rubble.Op)
  SharedDtor();
}

void Op::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Op::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Op::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}

const Op& Op::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rubble_5fkv_5fstore_2eproto();
  return *default_instance_;
}

Op* Op::default_instance_ = NULL;

Op* Op::New(::google::protobuf::Arena* arena) const {
  Op* n = new Op;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Op::Clear() {
// @@protoc_insertion_point(message_clear_start:rubble.Op)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Op, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Op*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Op::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rubble.Op)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rubble.Op.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rubble.Op.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Id;
        break;
      }

      // optional uint64 Id = 3;
      case 3: {
        if (tag == 24) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .rubble.Op.OpType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::rubble::Op_OpType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rubble.Op)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rubble.Op)
  return false;
#undef DO_
}

void Op::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rubble.Op)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.Op.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.Op.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint64 Id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional .rubble.Op.OpType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:rubble.Op)
}

::google::protobuf::uint8* Op::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rubble.Op)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.Op.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.Op.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint64 Id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional .rubble.Op.OpType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rubble.Op)
  return target;
}

int Op::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rubble.Op)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional uint64 Id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional .rubble.Op.OpType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Op::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rubble.Op)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Op* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Op>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rubble.Op)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rubble.Op)
    MergeFrom(*source);
  }
}

void Op::MergeFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rubble.Op)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Op::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rubble.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Op::CopyFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rubble.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Op::IsInitialized() const {

  return true;
}

void Op::Swap(Op* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Op::InternalSwap(Op* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Op::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Op_descriptor_;
  metadata.reflection = Op_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Op

// optional string key = 1;
void Op::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Op::key() const {
  // @@protoc_insertion_point(field_get:rubble.Op.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rubble.Op.key)
}
 void Op::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rubble.Op.key)
}
 void Op::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rubble.Op.key)
}
 ::std::string* Op::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:rubble.Op.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Op::release_key() {
  // @@protoc_insertion_point(field_release:rubble.Op.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rubble.Op.key)
}

// optional string value = 2;
void Op::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Op::value() const {
  // @@protoc_insertion_point(field_get:rubble.Op.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rubble.Op.value)
}
 void Op::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rubble.Op.value)
}
 void Op::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rubble.Op.value)
}
 ::std::string* Op::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:rubble.Op.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Op::release_value() {
  // @@protoc_insertion_point(field_release:rubble.Op.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Op::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:rubble.Op.value)
}

// optional uint64 Id = 3;
void Op::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Op::id() const {
  // @@protoc_insertion_point(field_get:rubble.Op.Id)
  return id_;
}
 void Op::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rubble.Op.Id)
}

// optional .rubble.Op.OpType type = 4;
void Op::clear_type() {
  type_ = 0;
}
 ::rubble::Op_OpType Op::type() const {
  // @@protoc_insertion_point(field_get:rubble.Op.type)
  return static_cast< ::rubble::Op_OpType >(type_);
}
 void Op::set_type(::rubble::Op_OpType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rubble.Op.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OpReply_OpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpReply_OpType_descriptor_;
}
bool OpReply_OpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpReply_OpType OpReply::GET;
const OpReply_OpType OpReply::PUT;
const OpReply_OpType OpReply::DELETE;
const OpReply_OpType OpReply::UPDATE;
const OpReply_OpType OpReply::OpType_MIN;
const OpReply_OpType OpReply::OpType_MAX;
const int OpReply::OpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpReply::kOkFieldNumber;
const int OpReply::kValueFieldNumber;
const int OpReply::kStatusFieldNumber;
const int OpReply::kIdFieldNumber;
const int OpReply::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpReply::OpReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rubble.OpReply)
}

void OpReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OpReply::OpReply(const OpReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rubble.OpReply)
}

void OpReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ok_ = false;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
}

OpReply::~OpReply() {
  // @@protoc_insertion_point(destructor:rubble.OpReply)
  SharedDtor();
}

void OpReply::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpReply_descriptor_;
}

const OpReply& OpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rubble_5fkv_5fstore_2eproto();
  return *default_instance_;
}

OpReply* OpReply::default_instance_ = NULL;

OpReply* OpReply::New(::google::protobuf::Arena* arena) const {
  OpReply* n = new OpReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rubble.OpReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OpReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ok_, id_);
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool OpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rubble.OpReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rubble.OpReply.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional string status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rubble.OpReply.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Id;
        break;
      }

      // optional int64 Id = 4;
      case 4: {
        if (tag == 32) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .rubble.OpReply.OpType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::rubble::OpReply_OpType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rubble.OpReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rubble.OpReply)
  return false;
#undef DO_
}

void OpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rubble.OpReply)
  // optional bool ok = 1;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.OpReply.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.OpReply.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // optional int64 Id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // optional .rubble.OpReply.OpType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:rubble.OpReply)
}

::google::protobuf::uint8* OpReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rubble.OpReply)
  // optional bool ok = 1;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.OpReply.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.OpReply.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // optional int64 Id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // optional .rubble.OpReply.OpType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rubble.OpReply)
  return target;
}

int OpReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rubble.OpReply)
  int total_size = 0;

  // optional bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional int64 Id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .rubble.OpReply.OpType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rubble.OpReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rubble.OpReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rubble.OpReply)
    MergeFrom(*source);
  }
}

void OpReply::MergeFrom(const OpReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rubble.OpReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void OpReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rubble.OpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpReply::CopyFrom(const OpReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rubble.OpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReply::IsInitialized() const {

  return true;
}

void OpReply::Swap(OpReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpReply::InternalSwap(OpReply* other) {
  std::swap(ok_, other->ok_);
  value_.Swap(&other->value_);
  status_.Swap(&other->status_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpReply_descriptor_;
  metadata.reflection = OpReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpReply

// optional bool ok = 1;
void OpReply::clear_ok() {
  ok_ = false;
}
 bool OpReply::ok() const {
  // @@protoc_insertion_point(field_get:rubble.OpReply.ok)
  return ok_;
}
 void OpReply::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:rubble.OpReply.ok)
}

// optional string value = 2;
void OpReply::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpReply::value() const {
  // @@protoc_insertion_point(field_get:rubble.OpReply.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpReply::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rubble.OpReply.value)
}
 void OpReply::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rubble.OpReply.value)
}
 void OpReply::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rubble.OpReply.value)
}
 ::std::string* OpReply::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:rubble.OpReply.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpReply::release_value() {
  // @@protoc_insertion_point(field_release:rubble.OpReply.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpReply::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:rubble.OpReply.value)
}

// optional string status = 3;
void OpReply::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpReply::status() const {
  // @@protoc_insertion_point(field_get:rubble.OpReply.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpReply::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rubble.OpReply.status)
}
 void OpReply::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rubble.OpReply.status)
}
 void OpReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rubble.OpReply.status)
}
 ::std::string* OpReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:rubble.OpReply.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpReply::release_status() {
  // @@protoc_insertion_point(field_release:rubble.OpReply.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpReply::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:rubble.OpReply.status)
}

// optional int64 Id = 4;
void OpReply::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 OpReply::id() const {
  // @@protoc_insertion_point(field_get:rubble.OpReply.Id)
  return id_;
}
 void OpReply::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rubble.OpReply.Id)
}

// optional .rubble.OpReply.OpType type = 5;
void OpReply::clear_type() {
  type_ = 0;
}
 ::rubble::OpReply_OpType OpReply::type() const {
  // @@protoc_insertion_point(field_get:rubble.OpReply.type)
  return static_cast< ::rubble::OpReply_OpType >(type_);
}
 void OpReply::set_type(::rubble::OpReply_OpType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rubble.OpReply.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRequest::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRequest::SyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rubble.SyncRequest)
}

void SyncRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SyncRequest::SyncRequest(const SyncRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rubble.SyncRequest)
}

void SyncRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SyncRequest::~SyncRequest() {
  // @@protoc_insertion_point(destructor:rubble.SyncRequest)
  SharedDtor();
}

void SyncRequest::SharedDtor() {
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRequest_descriptor_;
}

const SyncRequest& SyncRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rubble_5fkv_5fstore_2eproto();
  return *default_instance_;
}

SyncRequest* SyncRequest::default_instance_ = NULL;

SyncRequest* SyncRequest::New(::google::protobuf::Arena* arena) const {
  SyncRequest* n = new SyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rubble.SyncRequest)
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rubble.SyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string args = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rubble.SyncRequest.args"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rubble.SyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rubble.SyncRequest)
  return false;
#undef DO_
}

void SyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rubble.SyncRequest)
  // optional string args = 1;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.SyncRequest.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->args(), output);
  }

  // @@protoc_insertion_point(serialize_end:rubble.SyncRequest)
}

::google::protobuf::uint8* SyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rubble.SyncRequest)
  // optional string args = 1;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.SyncRequest.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->args(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rubble.SyncRequest)
  return target;
}

int SyncRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rubble.SyncRequest)
  int total_size = 0;

  // optional string args = 1;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rubble.SyncRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SyncRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rubble.SyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rubble.SyncRequest)
    MergeFrom(*source);
  }
}

void SyncRequest::MergeFrom(const SyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rubble.SyncRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
}

void SyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rubble.SyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRequest::CopyFrom(const SyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rubble.SyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRequest::IsInitialized() const {

  return true;
}

void SyncRequest::Swap(SyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRequest::InternalSwap(SyncRequest* other) {
  args_.Swap(&other->args_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRequest_descriptor_;
  metadata.reflection = SyncRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncRequest

// optional string args = 1;
void SyncRequest::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SyncRequest::args() const {
  // @@protoc_insertion_point(field_get:rubble.SyncRequest.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncRequest::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rubble.SyncRequest.args)
}
 void SyncRequest::set_args(const char* value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rubble.SyncRequest.args)
}
 void SyncRequest::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rubble.SyncRequest.args)
}
 ::std::string* SyncRequest::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:rubble.SyncRequest.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SyncRequest::release_args() {
  // @@protoc_insertion_point(field_release:rubble.SyncRequest.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncRequest::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:rubble.SyncRequest.args)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncReply::SyncReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rubble.SyncReply)
}

void SyncReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SyncReply::SyncReply(const SyncReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rubble.SyncReply)
}

void SyncReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SyncReply::~SyncReply() {
  // @@protoc_insertion_point(destructor:rubble.SyncReply)
  SharedDtor();
}

void SyncReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncReply_descriptor_;
}

const SyncReply& SyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rubble_5fkv_5fstore_2eproto();
  return *default_instance_;
}

SyncReply* SyncReply::default_instance_ = NULL;

SyncReply* SyncReply::New(::google::protobuf::Arena* arena) const {
  SyncReply* n = new SyncReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rubble.SyncReply)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rubble.SyncReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rubble.SyncReply.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rubble.SyncReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rubble.SyncReply)
  return false;
#undef DO_
}

void SyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rubble.SyncReply)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.SyncReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:rubble.SyncReply)
}

::google::protobuf::uint8* SyncReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rubble.SyncReply)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rubble.SyncReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rubble.SyncReply)
  return target;
}

int SyncReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rubble.SyncReply)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rubble.SyncReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SyncReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rubble.SyncReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rubble.SyncReply)
    MergeFrom(*source);
  }
}

void SyncReply::MergeFrom(const SyncReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rubble.SyncReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SyncReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rubble.SyncReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncReply::CopyFrom(const SyncReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rubble.SyncReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncReply::IsInitialized() const {

  return true;
}

void SyncReply::Swap(SyncReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncReply::InternalSwap(SyncReply* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncReply_descriptor_;
  metadata.reflection = SyncReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncReply

// optional string message = 1;
void SyncReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SyncReply::message() const {
  // @@protoc_insertion_point(field_get:rubble.SyncReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rubble.SyncReply.message)
}
 void SyncReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rubble.SyncReply.message)
}
 void SyncReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rubble.SyncReply.message)
}
 ::std::string* SyncReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:rubble.SyncReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SyncReply::release_message() {
  // @@protoc_insertion_point(field_release:rubble.SyncReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:rubble.SyncReply.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rubble

// @@protoc_insertion_point(global_scope)
